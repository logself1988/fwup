#!/bin/bash

#
# Test various FAT file system operations at a large
# offset
#

. ./common.sh

# No sparse file support on OSX, so skip
if [[ "$OSTYPE" == "darwin"* ]]; then
    exit 0
fi

# No sparse file support in Windows 10 bash mode, so skip it too
if [[ -d "/mnt/c/Users" ]]; then
    exit 0
fi

# The Raspberry Pi doesn't support big files. This seems like it
# should work, but since this is an unlikely use case, disable the
# test for the Raspberry Pis and other 32-bit ARMs.
if [[ "$OSTYPE" == "linux-gnueabihf" ]]; then
    exit 0
fi

cat >$CONFIG <<EOF
define(BOOT_PART_OFFSET, 4300000000)
define(BOOT_PART_COUNT, 77238)

file-resource 1K.bin {
	host-path = "${TESTFILE_1K}"
}

task complete {
	on-init {
                fat_mkfs(\${BOOT_PART_OFFSET}, \${BOOT_PART_COUNT})
                fat_setlabel(\${BOOT_PART_OFFSET}, "TESTLABL")
        }
        on-resource 1K.bin {
                fat_write(\${BOOT_PART_OFFSET}, "1.bin")
        }
        on-finish {
                fat_cp(\${BOOT_PART_OFFSET}, "1.bin", "2.bin")
                fat_mv(\${BOOT_PART_OFFSET}, "2.bin", "3.bin")
        }
}
EOF

# Create the firmware file, then "burn it"
# Force a timestamp since the FAT serial number depends
# on meta-creation-timestamp. This only needs to be done
# at the create stage since burning is always supposed to
# be bit for bit identical.
NOW="2015-05-05T18:10:16Z" $FWUP_CREATE -c -f $CONFIG -o $FWFILE
$FWUP_APPLY -a -d $IMGFILE -i $FWFILE -t complete

EXPECTED_OUTPUT=$WORK/expected.out
ACTUAL_OUTPUT=$WORK/actual.out

cat >$EXPECTED_OUTPUT << EOF
 Volume in drive : is TESTLABL
 Volume Serial Number is 46A5-9148
Directory for ::/

1        bin      1024 2015-05-05  18:10
3        bin      1024 2015-05-05  18:10
        2 files               2 048 bytes
                         38 908 416 bytes free

EOF

# mtools doesn't seem to support large offsets, so move
# the FAT filesystem to a temp file for the checks
dd if=$WORK/fwup.img of=$WORK/fwup-fat.img skip=4300000000 2>/dev/null

# Check that the directory looks right
mdir -i $WORK/fwup-fat.img > $ACTUAL_OUTPUT
diff -w $EXPECTED_OUTPUT $ACTUAL_OUTPUT

# Check the contents of the file
for i in 1 3; do
    mcopy -n -i $WORK/fwup-fat.img ::/${i}.bin $WORK/actual.1K.bin
    diff $TESTFILE_1K $WORK/actual.1K.bin
done

cleanup
