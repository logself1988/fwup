#!/bin/bash

#
# Test that a small FAT filesystem gets created in a way that's
# compatible with the TI AM335x ROM bootloader. This means that
# there's always a redundant FAT. The FATFS code doesn't create
# a redundant FAT by default, so this catches the case where it
# isn't enabled when upgrading the library.
#
# U-Boot requires that the type be set to "FAT16" rather than
# just "FAT", so that's checked here as well.

. ./common.sh

cat >$CONFIG <<EOF
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 16321)

mbr mbr-a {
    partition 0 {
        block-offset = \${BOOT_PART_OFFSET}
        block-count = \${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
}
task complete {
	on-init {
                mbr_write(mbr-a)
                fat_mkfs(\${BOOT_PART_OFFSET}, \${BOOT_PART_COUNT})
        }
}
EOF

# Create the firmware file, then "burn it"
# Force a timestamp since the FAT serial number depends
# on meta-creation-timestamp. This only needs to be done
# at the create stage since burning is always supposed to
# be bit for bit identical.
NOW="2015-05-05T18:10:16Z" $FWUP_CREATE -c -f $CONFIG -o $FWFILE
$FWUP_APPLY -a -d $IMGFILE -i $FWFILE -t complete

EXPECTED_OUTPUT=$WORK/expected.out
ACTUAL_OUTPUT=$WORK/actual.out

# This is the expected first block of the FAT entry
# The key location to verify is offset 0x10. It should
# be "2" to indicate a redundant FAT. Also note the type
# is "FAT16".
xxd -r - >$EXPECTED_OUTPUT <<EOF
00000000: ebfe 904d 5344 4f53 352e 3000 0201 0100  ...MSDOS5.0.....
00000010: 0200 02c1 3ff8 4000 3f00 ff00 0000 0000  ....?.@.?.......
00000020: 0000 0000 8000 2948 91a5 464e 4f20 4e41  ......)H..FNO NA
00000030: 4d45 2020 2020 4641 5431 3620 2020 0000  ME    FAT16   ..
00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000060: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000080: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000090: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000100: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000110: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000120: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000130: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000140: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000150: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000160: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000170: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000180: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000190: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.
EOF

dd if=$IMGFILE skip=63 count=1 2>/dev/null >$ACTUAL_OUTPUT
diff $EXPECTED_OUTPUT $ACTUAL_OUTPUT

